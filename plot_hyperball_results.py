try:
    import numpy as np
except ModuleNotFoundError:
    raise SystemExit("Matplotlib not found. Install with: python -m pip install numpy")

try:
    import matplotlib.pyplot as plt
except ModuleNotFoundError:
    raise SystemExit("Matplotlib not found. Install with: python -m pip install matplotlib")

V    = [512, 1063, 400, 16384, 138015, 474615, 522498]       # |V|
E    = [4096, 336, 15980, 131068, 749588, 3600020, 4170650]     # |E|

# mae_8  = [0.002546896166314853, 0.01508319040993002, 0.0009310393643251172, 0.0009682490654422932, 0.0005484771702185874, 0.0007184492254643617, 0.0007444035496081496]  # MAE
# mape_8 = [0.9336891510281979, 2.238952154926208, 0.1771302390628538, 0.5837162964020055, 0.4421927835544226, 0.6271945358030461, 0.6366213751446593]           # MAPE (%)
# rho_8  = [0.882168856788089, 0.999637988732694, 0.2553604710029438, 0.7026654804295666, 0.9953963648315234, 0.9554431980033734, 0.8457226400067749]      # Spearman’s ρ
#
# mae_9  = [0.0020712615283182225, 0.015069245125595654, 0.0006198201942065989, 0.0005445501541056226, 0.0004486725938415661, 0.00035565984692503903, 0.0003875202072458357]  # MAE
# mape_9 = [0.7593430744673234, 2.2363301328771246, 0.11792079194780529, 0.3282217965685367, 0.3517423528080387, 0.3103066192527748, 0.3313397543768806]           # MAPE (%)
# rho_9  = [0.9086059719790344, 0.999637988732694, 0.3654259089119307, 0.8170089999088931, 0.9978580532443101, 0.9768195480410048, 0.9079076038413764]      # Spearman’s ρ
#
# mae_10  = [0.001233657669060622, 0.015062078268330174, 0.0005183738673039126, 0.00047838251833234104, 0.0003136320289518309, 0.00035860953826507484, 0.0003146619872038413]  # MAE
# mape_10 = [0.4525787431136135, 2.234993490892203, 0.09862062825456963, 0.2883131891005442, 0.22340558154989942, 0.31277887159091294, 0.26921113581242523]           # MAPE (%)
# rho_10  = [0.9521142503805176, 0.999637988732694, 0.4623465771661073, 0.9079088634505703, 0.9989914927203117, 0.9860358349969099, 0.9556770421808676]      # Spearman’s ρ
#
# mae_11  = [0.0007559529116686036, 0.015058442183659248, 0.00046206227873289566, 0.0003615767819728884, 0.00046048653381721474, 0.0003927872759164713, 0.00020266960643464078]  # MAE
# mape_11 = [0.27818064253902475, 2.2343181426959617, 0.08790734852893295, 0.21798460996421415, 0.3631664748372783, 0.34263034846774343, 0.17335869685342087]           # MAPE (%)
# rho_11  = [0.9721299538801341, 0.999637988732694, 0.6490626816417603, 0.9309928608657599, 0.9994736487733749, 0.993846324055681, 0.9807387280323947]      # Spearman’s ρ
#
# mae_12  = [0.0009929212460685567, 0.015056607658470977, 0.0003425033251291798, 0.00017611300248945302, 0.00020788819062425107, 0.0001898798258358138, 0.00016103062174348216]  # MAE
# mape_12 = [0.3641100761881297, 2.233978248093985, 0.06516125760582592, 0.10614126621157137, 0.12186820947017867, 0.16560151831642667, 0.13775392305957612]           # MAPE (%)
# rho_12  = [0.9912414812716723, 0.999637988732694, 0.738145425908912, 0.9760225733805677, 0.999768803009836, 0.9963379023637667, 0.9877136258449339]      # Spearman’s ρ
#
# mae_13  = [0.0008469693963843234, 0.015055688258861858, 0.0003062984632158244, 0.00011335197535171295, 0.00017581526521066548, 0.00014593787118756573, 0.00009998034755723739]  # MAE
# mape_13 = [0.31069720793567734, 2.233807974538238, 0.058273282626810856, 0.0683160419188944, 0.09148354074060838, 0.12728743885404012, 0.08551816085920098]           # MAPE (%)
# rho_13  = [0.9950074959087216, 0.999637988732694, 0.8798021862636641, 0.9887768743838297, 0.9998818351081965, 0.998448888801435, 0.9942763029485625]      # Spearman’s ρ

results = {
    8: {"mae": [0.002546896166314853, 0.01508319040993002, 0.0009310393643251172, 0.0009682490654422932, 0.0005484771702185874, 0.0007184492254643617, 0.0007444035496081496],
        "mape": [0.9336891510281979, 2.238952154926208, 0.1771302390628538, 0.5837162964020055, 0.4421927835544226, 0.6271945358030461, 0.6366213751446593],
        "rho": [0.882168856788089, 0.999637988732694, 0.2553604710029438, 0.7026654804295666, 0.9953963648315234, 0.9554431980033734, 0.8457226400067749]},
    9: {"mae": [0.0020712615283182225, 0.015069245125595654, 0.0006198201942065989, 0.0005445501541056226, 0.0004486725938415661, 0.00035565984692503903, 0.0003875202072458357],
        "mape": [0.7593430744673234, 2.2363301328771246, 0.11792079194780529, 0.3282217965685367, 0.3517423528080387, 0.3103066192527748, 0.3313397543768806],
        "rho": [0.9086059719790344, 0.999637988732694, 0.3654259089119307, 0.8170089999088931, 0.9978580532443101, 0.9768195480410048, 0.9079076038413764]},
    10: {"mae": [0.001233657669060622, 0.015062078268330174, 0.0005183738673039126, 0.00047838251833234104, 0.0003136320289518309, 0.00035860953826507484, 0.0003146619872038413],
         "mape": [0.4525787431136135, 2.234993490892203, 0.09862062825456963, 0.2883131891005442, 0.22340558154989942, 0.31277887159091294, 0.26921113581242523],
         "rho": [0.9521142503805176, 0.999637988732694, 0.4623465771661073, 0.9079088634505703, 0.9989914927203117, 0.9860358349969099, 0.9556770421808676]},
    11: {"mae": [0.0007559529116686036, 0.015058442183659248, 0.00046206227873289566, 0.0003615767819728884, 0.00046048653381721474, 0.0003927872759164713, 0.00020266960643464078],
         "mape": [0.27818064253902475, 2.2343181426959617, 0.08790734852893295, 0.21798460996421415, 0.3631664748372783, 0.34263034846774343, 0.17335869685342087],
         "rho": [0.9721299538801341, 0.999637988732694, 0.6490626816417603, 0.9309928608657599, 0.9994736487733749, 0.993846324055681, 0.9807387280323947]},
    12: {"mae": [0.0009929212460685567, 0.015056607658470977, 0.0003425033251291798, 0.00017611300248945302, 0.00020788819062425107, 0.0001898798258358138, 0.00016103062174348216],
         "mape": [0.3641100761881297, 2.233978248093985, 0.06516125760582592, 0.10614126621157137, 0.12186820947017867, 0.16560151831642667, 0.13775392305957612],
         "rho": [0.9912414812716723, 0.999637988732694, 0.738145425908912, 0.9760225733805677, 0.999768803009836, 0.9963379023637667, 0.9877136258449339]},
    13: {"mae": [0.0008469693963843234, 0.015055688258861858, 0.0003062984632158244, 0.00011335197535171295, 0.00017581526521066548, 0.00014593787118756573, 0.00009998034755723739],
         "mape": [0.31069720793567734, 2.233807974538238, 0.058273282626810856, 0.0683160419188944, 0.09148354074060838, 0.12728743885404012, 0.08551816085920098],
         "rho": [0.9950074959087216, 0.999637988732694, 0.8798021862636641, 0.9887768743838297, 0.9998818351081965, 0.998448888801435, 0.9942763029485625]},
}

x = [v + e for v, e in zip(V, E)]

colors = plt.get_cmap("tab10").colors
markers = ["o", "s", "^", "D", "v", "P"]

def fit_and_plot(metric_name, fit_type="loglog", ylim=None):
    plt.figure(figsize=(8,5))

    for i, (prec, vals) in enumerate(sorted(results.items())):
        y = np.array(vals[metric_name], dtype=float)
        color = colors[i % len(colors)]
        marker = markers[i % len(markers)]

        # scatter points
        plt.scatter(x, y, color=color, marker=marker, s=60, label=f"p={prec}")

        # regression fit
        if fit_type == "loglog":  
            coeffs = np.polyfit(np.log(x), np.log(y), 1)
            x_fit = np.linspace(min(x), max(x), 300)
            y_fit = np.exp(coeffs[1]) * x_fit**coeffs[0]
        elif fit_type == "logx":  
            coeffs = np.polyfit(np.log(x), y, 1)
            x_fit = np.linspace(min(x), max(x), 300)
            y_fit = coeffs[0]*np.log(x_fit) + coeffs[1]
        else:
            raise ValueError("fit_type must be 'loglog' or 'logx'")

        # smooth curve
        plt.plot(x_fit, y_fit, color=color, linestyle="-", alpha=0.9)

    plt.xscale("log")
    if ylim:
        plt.ylim(ylim)
    plt.xlabel("|V| + |E|")
    plt.ylabel(metric_name.upper())
    plt.title(f"{metric_name.upper()} Regression by Precision")
    plt.grid(True, which="both", linestyle="--", alpha=0.5)
    plt.legend()

    # save
    filename = f"plots/res_evalutation_hyperball_{metric_name}.png"
    plt.savefig(filename, dpi=160, bbox_inches="tight")
    print(f"Saved {filename}")
    
    plt.show()

# generate and save plots
fit_and_plot("mae", fit_type="loglog")
fit_and_plot("mape", fit_type="loglog")
fit_and_plot("rho", fit_type="logx", ylim=(0.2, 1.05))
